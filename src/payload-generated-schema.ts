/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from "@payloadcms/db-postgres";
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  varchar,
  timestamp,
  serial,
  boolean,
  numeric,
  type AnyPgColumn,
  jsonb,
  pgEnum,
} from "@payloadcms/db-postgres/drizzle/pg-core";
import { sql, relations } from "@payloadcms/db-postgres/drizzle";
export const enum_users_role = pgEnum("enum_users_role", [
  "student",
  "instructor",
  "admin",
]);
export const enum_courses_difficulty = pgEnum("enum_courses_difficulty", [
  "beginner",
  "intermediate",
  "advanced",
]);
export const enum_courses_status = pgEnum("enum_courses_status", [
  "draft",
  "published",
  "archived",
]);
export const enum_enrollments_role = pgEnum("enum_enrollments_role", [
  "student",
  "teacher",
  "ta",
  "manager",
]);
export const enum_enrollments_status = pgEnum("enum_enrollments_status", [
  "active",
  "inactive",
  "completed",
  "dropped",
]);
export const enum_activity_modules_type = pgEnum("enum_activity_modules_type", [
  "page",
  "whiteboard",
  "assignment",
  "quiz",
  "discussion",
]);
export const enum_activity_modules_status = pgEnum(
  "enum_activity_modules_status",
  ["draft", "published", "archived"],
);
export const enum_tags_tag_type = pgEnum("enum_tags_tag_type", [
  "release",
  "milestone",
  "snapshot",
]);

export const users_sessions = pgTable(
  "users_sessions",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    expiresAt: timestamp("expires_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
  },
  (columns) => ({
    _orderIdx: index("users_sessions_order_idx").on(columns._order),
    _parentIDIdx: index("users_sessions_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [users.id],
      name: "users_sessions_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const users = pgTable(
  "users",
  {
    id: serial("id").primaryKey(),
    firstName: varchar("first_name"),
    lastName: varchar("last_name"),
    role: enum_users_role("role").default("student"),
    bio: varchar("bio"),
    avatar: varchar("avatar"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    email: varchar("email").notNull(),
    resetPasswordToken: varchar("reset_password_token"),
    resetPasswordExpiration: timestamp("reset_password_expiration", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar("salt"),
    hash: varchar("hash"),
    _verified: boolean("_verified"),
    _verificationToken: varchar("_verificationtoken"),
    loginAttempts: numeric("login_attempts").default("0"),
    lockUntil: timestamp("lock_until", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
  },
  (columns) => ({
    users_updated_at_idx: index("users_updated_at_idx").on(columns.updatedAt),
    users_created_at_idx: index("users_created_at_idx").on(columns.createdAt),
    users_email_idx: uniqueIndex("users_email_idx").on(columns.email),
  }),
);

export const courses_tags = pgTable(
  "courses_tags",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    tag: varchar("tag"),
  },
  (columns) => ({
    _orderIdx: index("courses_tags_order_idx").on(columns._order),
    _parentIDIdx: index("courses_tags_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [courses.id],
      name: "courses_tags_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const courses = pgTable(
  "courses",
  {
    id: serial("id").primaryKey(),
    title: varchar("title").notNull(),
    description: varchar("description").notNull(),
    instructor: integer("instructor_id")
      .notNull()
      .references(() => users.id, {
        onDelete: "set null",
      }),
    difficulty: enum_courses_difficulty("difficulty").default("beginner"),
    duration: numeric("duration"),
    status: enum_courses_status("status").default("draft"),
    thumbnail: varchar("thumbnail"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    courses_instructor_idx: index("courses_instructor_idx").on(
      columns.instructor,
    ),
    courses_updated_at_idx: index("courses_updated_at_idx").on(
      columns.updatedAt,
    ),
    courses_created_at_idx: index("courses_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const enrollments = pgTable(
  "enrollments",
  {
    id: serial("id").primaryKey(),
    user: integer("user_id")
      .notNull()
      .references(() => users.id, {
        onDelete: "set null",
      }),
    course: integer("course_id")
      .notNull()
      .references(() => courses.id, {
        onDelete: "set null",
      }),
    role: enum_enrollments_role("role").notNull(),
    status: enum_enrollments_status("status").default("active"),
    enrolledAt: timestamp("enrolled_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    completedAt: timestamp("completed_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    enrollments_user_idx: index("enrollments_user_idx").on(columns.user),
    enrollments_course_idx: index("enrollments_course_idx").on(columns.course),
    enrollments_updated_at_idx: index("enrollments_updated_at_idx").on(
      columns.updatedAt,
    ),
    enrollments_created_at_idx: index("enrollments_created_at_idx").on(
      columns.createdAt,
    ),
    user_course_idx: uniqueIndex("user_course_idx").on(
      columns.user,
      columns.course,
    ),
  }),
);

export const activity_modules = pgTable(
  "activity_modules",
  {
    id: serial("id").primaryKey(),
    slug: varchar("slug").notNull(),
    title: varchar("title").notNull(),
    description: varchar("description"),
    type: enum_activity_modules_type("type").notNull(),
    status: enum_activity_modules_status("status").default("draft"),
    createdBy: integer("created_by_id")
      .notNull()
      .references(() => users.id, {
        onDelete: "set null",
      }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    activity_modules_slug_idx: uniqueIndex("activity_modules_slug_idx").on(
      columns.slug,
    ),
    activity_modules_created_by_idx: index(
      "activity_modules_created_by_idx",
    ).on(columns.createdBy),
    activity_modules_updated_at_idx: index(
      "activity_modules_updated_at_idx",
    ).on(columns.updatedAt),
    activity_modules_created_at_idx: index(
      "activity_modules_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const branches = pgTable(
  "branches",
  {
    id: serial("id").primaryKey(),
    name: varchar("name").notNull(),
    description: varchar("description"),
    isDefault: boolean("is_default").default(false),
    createdBy: integer("created_by_id")
      .notNull()
      .references(() => users.id, {
        onDelete: "set null",
      }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    branches_name_idx: uniqueIndex("branches_name_idx").on(columns.name),
    branches_created_by_idx: index("branches_created_by_idx").on(
      columns.createdBy,
    ),
    branches_updated_at_idx: index("branches_updated_at_idx").on(
      columns.updatedAt,
    ),
    branches_created_at_idx: index("branches_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const commits = pgTable(
  "commits",
  {
    id: serial("id").primaryKey(),
    hash: varchar("hash").notNull(),
    message: varchar("message").notNull(),
    author: integer("author_id")
      .notNull()
      .references(() => users.id, {
        onDelete: "set null",
      }),
    committer: integer("committer_id")
      .notNull()
      .references(() => users.id, {
        onDelete: "set null",
      }),
    parentCommit: integer("parent_commit_id").references(
      (): AnyPgColumn => commits.id,
      {
        onDelete: "set null",
      },
    ),
    isMergeCommit: boolean("is_merge_commit").default(false),
    commitDate: timestamp("commit_date", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    commits_hash_idx: uniqueIndex("commits_hash_idx").on(columns.hash),
    commits_author_idx: index("commits_author_idx").on(columns.author),
    commits_committer_idx: index("commits_committer_idx").on(columns.committer),
    commits_parent_commit_idx: index("commits_parent_commit_idx").on(
      columns.parentCommit,
    ),
    commits_updated_at_idx: index("commits_updated_at_idx").on(
      columns.updatedAt,
    ),
    commits_created_at_idx: index("commits_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const commit_parents = pgTable(
  "commit_parents",
  {
    id: serial("id").primaryKey(),
    commit: integer("commit_id")
      .notNull()
      .references(() => commits.id, {
        onDelete: "set null",
      }),
    parentCommit: integer("parent_commit_id")
      .notNull()
      .references(() => commits.id, {
        onDelete: "set null",
      }),
    parentOrder: numeric("parent_order").notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    commit_parents_commit_idx: index("commit_parents_commit_idx").on(
      columns.commit,
    ),
    commit_parents_parent_commit_idx: index(
      "commit_parents_parent_commit_idx",
    ).on(columns.parentCommit),
    commit_parents_updated_at_idx: index("commit_parents_updated_at_idx").on(
      columns.updatedAt,
    ),
    commit_parents_created_at_idx: index("commit_parents_created_at_idx").on(
      columns.createdAt,
    ),
    commit_parentCommit_idx: uniqueIndex("commit_parentCommit_idx").on(
      columns.commit,
      columns.parentCommit,
    ),
  }),
);

export const activity_module_versions = pgTable(
  "activity_module_versions",
  {
    id: serial("id").primaryKey(),
    activityModule: integer("activity_module_id")
      .notNull()
      .references(() => activity_modules.id, {
        onDelete: "set null",
      }),
    commit: integer("commit_id")
      .notNull()
      .references(() => commits.id, {
        onDelete: "set null",
      }),
    branch: integer("branch_id")
      .notNull()
      .references(() => branches.id, {
        onDelete: "set null",
      }),
    content: jsonb("content").notNull(),
    title: varchar("title").notNull(),
    description: varchar("description"),
    isCurrentHead: boolean("is_current_head").default(false),
    contentHash: varchar("content_hash"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    activity_module_versions_activity_module_idx: index(
      "activity_module_versions_activity_module_idx",
    ).on(columns.activityModule),
    activity_module_versions_commit_idx: index(
      "activity_module_versions_commit_idx",
    ).on(columns.commit),
    activity_module_versions_branch_idx: index(
      "activity_module_versions_branch_idx",
    ).on(columns.branch),
    activity_module_versions_updated_at_idx: index(
      "activity_module_versions_updated_at_idx",
    ).on(columns.updatedAt),
    activity_module_versions_created_at_idx: index(
      "activity_module_versions_created_at_idx",
    ).on(columns.createdAt),
    activityModule_commit_branch_idx: uniqueIndex(
      "activityModule_commit_branch_idx",
    ).on(columns.activityModule, columns.commit, columns.branch),
    activityModule_branch_isCurrentHead_idx: index(
      "activityModule_branch_isCurrentHead_idx",
    ).on(columns.activityModule, columns.branch, columns.isCurrentHead),
  }),
);

export const tags = pgTable(
  "tags",
  {
    id: serial("id").primaryKey(),
    name: varchar("name").notNull(),
    description: varchar("description"),
    commit: integer("commit_id")
      .notNull()
      .references(() => commits.id, {
        onDelete: "set null",
      }),
    tagType: enum_tags_tag_type("tag_type").default("snapshot"),
    createdBy: integer("created_by_id")
      .notNull()
      .references(() => users.id, {
        onDelete: "set null",
      }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    tags_name_idx: uniqueIndex("tags_name_idx").on(columns.name),
    tags_commit_idx: index("tags_commit_idx").on(columns.commit),
    tags_created_by_idx: index("tags_created_by_idx").on(columns.createdBy),
    tags_updated_at_idx: index("tags_updated_at_idx").on(columns.updatedAt),
    tags_created_at_idx: index("tags_created_at_idx").on(columns.createdAt),
  }),
);

export const payload_locked_documents = pgTable(
  "payload_locked_documents",
  {
    id: serial("id").primaryKey(),
    globalSlug: varchar("global_slug"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index(
      "payload_locked_documents_global_slug_idx",
    ).on(columns.globalSlug),
    payload_locked_documents_updated_at_idx: index(
      "payload_locked_documents_updated_at_idx",
    ).on(columns.updatedAt),
    payload_locked_documents_created_at_idx: index(
      "payload_locked_documents_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_locked_documents_rels = pgTable(
  "payload_locked_documents_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
    coursesID: integer("courses_id"),
    enrollmentsID: integer("enrollments_id"),
    "activity-modulesID": integer("activity_modules_id"),
    branchesID: integer("branches_id"),
    commitsID: integer("commits_id"),
    "commit-parentsID": integer("commit_parents_id"),
    "activity-module-versionsID": integer("activity_module_versions_id"),
    tagsID: integer("tags_id"),
  },
  (columns) => ({
    order: index("payload_locked_documents_rels_order_idx").on(columns.order),
    parentIdx: index("payload_locked_documents_rels_parent_idx").on(
      columns.parent,
    ),
    pathIdx: index("payload_locked_documents_rels_path_idx").on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      "payload_locked_documents_rels_users_id_idx",
    ).on(columns.usersID),
    payload_locked_documents_rels_courses_id_idx: index(
      "payload_locked_documents_rels_courses_id_idx",
    ).on(columns.coursesID),
    payload_locked_documents_rels_enrollments_id_idx: index(
      "payload_locked_documents_rels_enrollments_id_idx",
    ).on(columns.enrollmentsID),
    payload_locked_documents_rels_activity_modules_id_idx: index(
      "payload_locked_documents_rels_activity_modules_id_idx",
    ).on(columns["activity-modulesID"]),
    payload_locked_documents_rels_branches_id_idx: index(
      "payload_locked_documents_rels_branches_id_idx",
    ).on(columns.branchesID),
    payload_locked_documents_rels_commits_id_idx: index(
      "payload_locked_documents_rels_commits_id_idx",
    ).on(columns.commitsID),
    payload_locked_documents_rels_commit_parents_id_idx: index(
      "payload_locked_documents_rels_commit_parents_id_idx",
    ).on(columns["commit-parentsID"]),
    payload_locked_documents_rels_activity_module_versions_i_idx: index(
      "payload_locked_documents_rels_activity_module_versions_i_idx",
    ).on(columns["activity-module-versionsID"]),
    payload_locked_documents_rels_tags_id_idx: index(
      "payload_locked_documents_rels_tags_id_idx",
    ).on(columns.tagsID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_locked_documents.id],
      name: "payload_locked_documents_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_locked_documents_rels_users_fk",
    }).onDelete("cascade"),
    coursesIdFk: foreignKey({
      columns: [columns["coursesID"]],
      foreignColumns: [courses.id],
      name: "payload_locked_documents_rels_courses_fk",
    }).onDelete("cascade"),
    enrollmentsIdFk: foreignKey({
      columns: [columns["enrollmentsID"]],
      foreignColumns: [enrollments.id],
      name: "payload_locked_documents_rels_enrollments_fk",
    }).onDelete("cascade"),
    "activity-modulesIdFk": foreignKey({
      columns: [columns["activity-modulesID"]],
      foreignColumns: [activity_modules.id],
      name: "payload_locked_documents_rels_activity_modules_fk",
    }).onDelete("cascade"),
    branchesIdFk: foreignKey({
      columns: [columns["branchesID"]],
      foreignColumns: [branches.id],
      name: "payload_locked_documents_rels_branches_fk",
    }).onDelete("cascade"),
    commitsIdFk: foreignKey({
      columns: [columns["commitsID"]],
      foreignColumns: [commits.id],
      name: "payload_locked_documents_rels_commits_fk",
    }).onDelete("cascade"),
    "commit-parentsIdFk": foreignKey({
      columns: [columns["commit-parentsID"]],
      foreignColumns: [commit_parents.id],
      name: "payload_locked_documents_rels_commit_parents_fk",
    }).onDelete("cascade"),
    "activity-module-versionsIdFk": foreignKey({
      columns: [columns["activity-module-versionsID"]],
      foreignColumns: [activity_module_versions.id],
      name: "payload_locked_documents_rels_activity_module_versions_fk",
    }).onDelete("cascade"),
    tagsIdFk: foreignKey({
      columns: [columns["tagsID"]],
      foreignColumns: [tags.id],
      name: "payload_locked_documents_rels_tags_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_preferences = pgTable(
  "payload_preferences",
  {
    id: serial("id").primaryKey(),
    key: varchar("key"),
    value: jsonb("value"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index("payload_preferences_key_idx").on(
      columns.key,
    ),
    payload_preferences_updated_at_idx: index(
      "payload_preferences_updated_at_idx",
    ).on(columns.updatedAt),
    payload_preferences_created_at_idx: index(
      "payload_preferences_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_preferences_rels = pgTable(
  "payload_preferences_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
  },
  (columns) => ({
    order: index("payload_preferences_rels_order_idx").on(columns.order),
    parentIdx: index("payload_preferences_rels_parent_idx").on(columns.parent),
    pathIdx: index("payload_preferences_rels_path_idx").on(columns.path),
    payload_preferences_rels_users_id_idx: index(
      "payload_preferences_rels_users_id_idx",
    ).on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_preferences.id],
      name: "payload_preferences_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_preferences_rels_users_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_migrations = pgTable(
  "payload_migrations",
  {
    id: serial("id").primaryKey(),
    name: varchar("name"),
    batch: numeric("batch"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index(
      "payload_migrations_updated_at_idx",
    ).on(columns.updatedAt),
    payload_migrations_created_at_idx: index(
      "payload_migrations_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const relations_users_sessions = relations(
  users_sessions,
  ({ one }) => ({
    _parentID: one(users, {
      fields: [users_sessions._parentID],
      references: [users.id],
      relationName: "sessions",
    }),
  }),
);
export const relations_users = relations(users, ({ many }) => ({
  sessions: many(users_sessions, {
    relationName: "sessions",
  }),
}));
export const relations_courses_tags = relations(courses_tags, ({ one }) => ({
  _parentID: one(courses, {
    fields: [courses_tags._parentID],
    references: [courses.id],
    relationName: "tags",
  }),
}));
export const relations_courses = relations(courses, ({ one, many }) => ({
  instructor: one(users, {
    fields: [courses.instructor],
    references: [users.id],
    relationName: "instructor",
  }),
  tags: many(courses_tags, {
    relationName: "tags",
  }),
}));
export const relations_enrollments = relations(enrollments, ({ one }) => ({
  user: one(users, {
    fields: [enrollments.user],
    references: [users.id],
    relationName: "user",
  }),
  course: one(courses, {
    fields: [enrollments.course],
    references: [courses.id],
    relationName: "course",
  }),
}));
export const relations_activity_modules = relations(
  activity_modules,
  ({ one }) => ({
    createdBy: one(users, {
      fields: [activity_modules.createdBy],
      references: [users.id],
      relationName: "createdBy",
    }),
  }),
);
export const relations_branches = relations(branches, ({ one }) => ({
  createdBy: one(users, {
    fields: [branches.createdBy],
    references: [users.id],
    relationName: "createdBy",
  }),
}));
export const relations_commits = relations(commits, ({ one }) => ({
  author: one(users, {
    fields: [commits.author],
    references: [users.id],
    relationName: "author",
  }),
  committer: one(users, {
    fields: [commits.committer],
    references: [users.id],
    relationName: "committer",
  }),
  parentCommit: one(commits, {
    fields: [commits.parentCommit],
    references: [commits.id],
    relationName: "parentCommit",
  }),
}));
export const relations_commit_parents = relations(
  commit_parents,
  ({ one }) => ({
    commit: one(commits, {
      fields: [commit_parents.commit],
      references: [commits.id],
      relationName: "commit",
    }),
    parentCommit: one(commits, {
      fields: [commit_parents.parentCommit],
      references: [commits.id],
      relationName: "parentCommit",
    }),
  }),
);
export const relations_activity_module_versions = relations(
  activity_module_versions,
  ({ one }) => ({
    activityModule: one(activity_modules, {
      fields: [activity_module_versions.activityModule],
      references: [activity_modules.id],
      relationName: "activityModule",
    }),
    commit: one(commits, {
      fields: [activity_module_versions.commit],
      references: [commits.id],
      relationName: "commit",
    }),
    branch: one(branches, {
      fields: [activity_module_versions.branch],
      references: [branches.id],
      relationName: "branch",
    }),
  }),
);
export const relations_tags = relations(tags, ({ one }) => ({
  commit: one(commits, {
    fields: [tags.commit],
    references: [commits.id],
    relationName: "commit",
  }),
  createdBy: one(users, {
    fields: [tags.createdBy],
    references: [users.id],
    relationName: "createdBy",
  }),
}));
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
    coursesID: one(courses, {
      fields: [payload_locked_documents_rels.coursesID],
      references: [courses.id],
      relationName: "courses",
    }),
    enrollmentsID: one(enrollments, {
      fields: [payload_locked_documents_rels.enrollmentsID],
      references: [enrollments.id],
      relationName: "enrollments",
    }),
    "activity-modulesID": one(activity_modules, {
      fields: [payload_locked_documents_rels["activity-modulesID"]],
      references: [activity_modules.id],
      relationName: "activity-modules",
    }),
    branchesID: one(branches, {
      fields: [payload_locked_documents_rels.branchesID],
      references: [branches.id],
      relationName: "branches",
    }),
    commitsID: one(commits, {
      fields: [payload_locked_documents_rels.commitsID],
      references: [commits.id],
      relationName: "commits",
    }),
    "commit-parentsID": one(commit_parents, {
      fields: [payload_locked_documents_rels["commit-parentsID"]],
      references: [commit_parents.id],
      relationName: "commit-parents",
    }),
    "activity-module-versionsID": one(activity_module_versions, {
      fields: [payload_locked_documents_rels["activity-module-versionsID"]],
      references: [activity_module_versions.id],
      relationName: "activity-module-versions",
    }),
    tagsID: one(tags, {
      fields: [payload_locked_documents_rels.tagsID],
      references: [tags.id],
      relationName: "tags",
    }),
  }),
);
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
  }),
);
export const relations_payload_preferences = relations(
  payload_preferences,
  ({ many }) => ({
    _rels: many(payload_preferences_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_migrations = relations(
  payload_migrations,
  () => ({}),
);

type DatabaseSchema = {
  enum_users_role: typeof enum_users_role;
  enum_courses_difficulty: typeof enum_courses_difficulty;
  enum_courses_status: typeof enum_courses_status;
  enum_enrollments_role: typeof enum_enrollments_role;
  enum_enrollments_status: typeof enum_enrollments_status;
  enum_activity_modules_type: typeof enum_activity_modules_type;
  enum_activity_modules_status: typeof enum_activity_modules_status;
  enum_tags_tag_type: typeof enum_tags_tag_type;
  users_sessions: typeof users_sessions;
  users: typeof users;
  courses_tags: typeof courses_tags;
  courses: typeof courses;
  enrollments: typeof enrollments;
  activity_modules: typeof activity_modules;
  branches: typeof branches;
  commits: typeof commits;
  commit_parents: typeof commit_parents;
  activity_module_versions: typeof activity_module_versions;
  tags: typeof tags;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  relations_users_sessions: typeof relations_users_sessions;
  relations_users: typeof relations_users;
  relations_courses_tags: typeof relations_courses_tags;
  relations_courses: typeof relations_courses;
  relations_enrollments: typeof relations_enrollments;
  relations_activity_modules: typeof relations_activity_modules;
  relations_branches: typeof relations_branches;
  relations_commits: typeof relations_commits;
  relations_commit_parents: typeof relations_commit_parents;
  relations_activity_module_versions: typeof relations_activity_module_versions;
  relations_tags: typeof relations_tags;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
};

declare module "@payloadcms/db-postgres" {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
