/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    courses: Course;
    enrollments: Enrollment;
    origins: Origin;
    'activity-modules': ActivityModule;
    commits: Commit;
    tags: Tag;
    'merge-requests': MergeRequest;
    'merge-request-comments': MergeRequestComment;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    origins: {
      branches: 'activity-modules';
    };
    'activity-modules': {
      commits: 'commits';
    };
    'merge-requests': {
      comments: 'merge-request-comments';
    };
  };
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    courses: CoursesSelect<false> | CoursesSelect<true>;
    enrollments: EnrollmentsSelect<false> | EnrollmentsSelect<true>;
    origins: OriginsSelect<false> | OriginsSelect<true>;
    'activity-modules': ActivityModulesSelect<false> | ActivityModulesSelect<true>;
    commits: CommitsSelect<false> | CommitsSelect<true>;
    tags: TagsSelect<false> | TagsSelect<true>;
    'merge-requests': MergeRequestsSelect<false> | MergeRequestsSelect<true>;
    'merge-request-comments': MergeRequestCommentsSelect<false> | MergeRequestCommentsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  firstName?: string | null;
  lastName?: string | null;
  role?: ('student' | 'instructor' | 'admin') | null;
  bio?: string | null;
  avatar?: string | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  _verified?: boolean | null;
  _verificationToken?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "courses".
 */
export interface Course {
  id: number;
  title: string;
  description: string;
  instructor: number | User;
  difficulty?: ('beginner' | 'intermediate' | 'advanced') | null;
  duration?: number | null;
  status?: ('draft' | 'published' | 'archived') | null;
  thumbnail?: string | null;
  tags?:
    | {
        tag?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "enrollments".
 */
export interface Enrollment {
  id: number;
  user: number | User;
  course: number | Course;
  role: 'student' | 'teacher' | 'ta' | 'manager';
  status?: ('active' | 'inactive' | 'completed' | 'dropped') | null;
  enrolledAt?: string | null;
  completedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "origins".
 */
export interface Origin {
  id: number;
  branches?: {
    docs?: (number | ActivityModule)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  createdBy: number | User;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "activity-modules".
 */
export interface ActivityModule {
  id: number;
  title: string;
  description?: string | null;
  branch: string;
  origin: number | Origin;
  commits?: {
    docs?: (number | Commit)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  type: 'page' | 'whiteboard' | 'assignment' | 'quiz' | 'discussion';
  status?: ('draft' | 'published' | 'archived') | null;
  createdBy: number | User;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "commits".
 */
export interface Commit {
  id: number;
  hash: string;
  activityModule?: (number | ActivityModule)[] | null;
  message: string;
  author: number | User;
  parentCommit?: (number | null) | Commit;
  commitDate: string;
  content:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  contentHash: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags".
 */
export interface Tag {
  id: number;
  name: string;
  description?: string | null;
  commit: number | Commit;
  origin: number | Origin;
  tagType?: ('release' | 'milestone' | 'snapshot') | null;
  createdBy: number | User;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "merge-requests".
 */
export interface MergeRequest {
  id: number;
  title: string;
  description?: string | null;
  from: number | ActivityModule;
  to: number | ActivityModule;
  status?: ('open' | 'merged' | 'rejected' | 'closed') | null;
  comments?: {
    docs?: (number | MergeRequestComment)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  rejectedAt?: string | null;
  rejectedBy?: (number | null) | User;
  mergedAt?: string | null;
  mergedBy?: (number | null) | User;
  createdBy: number | User;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "merge-request-comments".
 */
export interface MergeRequestComment {
  id: number;
  comment: string;
  createdBy: number | User;
  mergeRequest: number | MergeRequest;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'courses';
        value: number | Course;
      } | null)
    | ({
        relationTo: 'enrollments';
        value: number | Enrollment;
      } | null)
    | ({
        relationTo: 'origins';
        value: number | Origin;
      } | null)
    | ({
        relationTo: 'activity-modules';
        value: number | ActivityModule;
      } | null)
    | ({
        relationTo: 'commits';
        value: number | Commit;
      } | null)
    | ({
        relationTo: 'tags';
        value: number | Tag;
      } | null)
    | ({
        relationTo: 'merge-requests';
        value: number | MergeRequest;
      } | null)
    | ({
        relationTo: 'merge-request-comments';
        value: number | MergeRequestComment;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  firstName?: T;
  lastName?: T;
  role?: T;
  bio?: T;
  avatar?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  _verified?: T;
  _verificationToken?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "courses_select".
 */
export interface CoursesSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  instructor?: T;
  difficulty?: T;
  duration?: T;
  status?: T;
  thumbnail?: T;
  tags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "enrollments_select".
 */
export interface EnrollmentsSelect<T extends boolean = true> {
  user?: T;
  course?: T;
  role?: T;
  status?: T;
  enrolledAt?: T;
  completedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "origins_select".
 */
export interface OriginsSelect<T extends boolean = true> {
  branches?: T;
  createdBy?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "activity-modules_select".
 */
export interface ActivityModulesSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  branch?: T;
  origin?: T;
  commits?: T;
  type?: T;
  status?: T;
  createdBy?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "commits_select".
 */
export interface CommitsSelect<T extends boolean = true> {
  hash?: T;
  activityModule?: T;
  message?: T;
  author?: T;
  parentCommit?: T;
  commitDate?: T;
  content?: T;
  contentHash?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags_select".
 */
export interface TagsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  commit?: T;
  origin?: T;
  tagType?: T;
  createdBy?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "merge-requests_select".
 */
export interface MergeRequestsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  from?: T;
  to?: T;
  status?: T;
  comments?: T;
  rejectedAt?: T;
  rejectedBy?: T;
  mergedAt?: T;
  mergedBy?: T;
  createdBy?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "merge-request-comments_select".
 */
export interface MergeRequestCommentsSelect<T extends boolean = true> {
  comment?: T;
  createdBy?: T;
  mergeRequest?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}